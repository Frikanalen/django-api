# Stub file for django-environ

from typing import Any, Callable, Dict, IO, List, Optional, Tuple, Type, Union
from pathlib import Path as TypingPath
from urllib.parse import ParseResult

__copyright__: str
__version__: str
__license__: str
__author__: str
__author_email__: str
__maintainer__: str
__maintainer_email__: str
__url__: str
__description__: str

class ImproperlyConfigured(Exception): ...

REDIS_DRIVER: str
DJANGO_POSTGRES: str
PYMEMCACHE_DRIVER: str

def choose_rediscache_driver() -> str: ...
def choose_postgres_driver() -> str: ...
def choose_pymemcache_driver() -> str: ...

class Env:
    URL_CLASS: Type[ParseResult]

    def __init__(self, **scheme: Any) -> None: ...
    def str(self, var: str, default: Any = ..., multiline: bool = False) -> str: ...
    def bytes(self, var: str, default: Any = ..., encoding: str = "utf8") -> bytes: ...
    def bool(self, var: str, default: Any = ...) -> bool: ...
    def int(self, var: str, default: Any = ...) -> int: ...
    def float(self, var: str, default: Any = ...) -> float: ...
    def json(self, var: str, default: Any = ...) -> Any: ...
    def list(self, var: str, cast: Optional[Callable] = ..., default: Any = ...) -> List[Any]: ...
    def tuple(
        self, var: str, cast: Optional[Callable] = ..., default: Any = ...
    ) -> Tuple[Any, ...]: ...
    def dict(self, var: str, cast: Type = dict, default: Any = ...) -> Dict[Any, Any]: ...
    def url(self, var: str, default: Any = ...) -> ParseResult: ...
    def db_url(
        self, var: str = "DATABASE_URL", default: Any = ..., engine: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def db(
        self, var: str = "DATABASE_URL", default: Any = ..., engine: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def cache_url(
        self, var: str = "CACHE_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def cache(
        self, var: str = "CACHE_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def email_url(
        self, var: str = "EMAIL_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def email(
        self, var: str = "EMAIL_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def search_url(
        self, var: str = "SEARCH_URL", default: Any = ..., engine: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def channels_url(
        self, var: str = "CHANNELS_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def channels(
        self, var: str = "CHANNELS_URL", default: Any = ..., backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    def path(self, var: str, default: Any = ..., **kwargs: Any) -> TypingPath: ...
    def get_value(
        self,
        var: str,
        cast: Optional[Callable] = ...,
        default: Any = ...,
        parse_default: bool = False,
    ) -> Any: ...
    @classmethod
    def parse_value(cls, value: Any, cast: Callable) -> Any: ...
    @classmethod
    def db_url_config(
        cls, url: Union[str, ParseResult], engine: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    @classmethod
    def cache_url_config(
        cls, url: Union[str, ParseResult], backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    @classmethod
    def email_url_config(
        cls, url: Union[str, ParseResult], backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    @classmethod
    def channels_url_config(
        cls, url: Union[str, ParseResult], backend: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    @classmethod
    def search_url_config(
        cls, url: Union[str, ParseResult], engine: Optional[str] = ...
    ) -> Dict[str, Any]: ...
    @classmethod
    def read_env(
        cls,
        env_file: Optional[str] = ...,
        overwrite: bool = False,
        parse_comments: bool = False,
        encoding: str = "utf8",
        **overrides: Any,
    ) -> None: ...

class FileAwareEnv(Env): ...

class Path:
    root: str
    def __init__(self, start: str = "", *paths: str, **kwargs: Any) -> None: ...
    def path(self, *paths: str, **kwargs: Any) -> TypingPath: ...
    def file(self, name: str, *args: Any, **kwargs: Any) -> IO[Any]: ...
    def rfind(self, *args: Any, **kwargs: Any) -> int: ...
    def find(self, *args: Any, **kwargs: Any) -> int: ...

class FileAwareMapping:
    def __init__(self, env: Optional[Dict[str, str]] = ..., cache: bool = True) -> None: ...
